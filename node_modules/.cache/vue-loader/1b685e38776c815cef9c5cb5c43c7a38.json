{"remainingRequest":"C:\\Projects\\calculator\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Projects\\calculator\\src\\App.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Projects\\calculator\\src\\App.vue","mtime":1635845146663},{"path":"C:\\Projects\\calculator\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Projects\\calculator\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Projects\\calculator\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Projects\\calculator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Projects\\calculator\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgojYXBwIHsKICBmb250LWZhbWlseTogQXZlbmlyLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOwogIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkOwogIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7CiAgdGV4dC1hbGlnbjogY2VudGVyOwogIGNvbG9yOiAjMmMzZTUwOwogIG1hcmdpbi10b3A6IDYwcHg7Cn0KI2lucHV0Zm9ybXsKICB3aWR0aDogMzAlOwp9CiNjYWxsZXIsI2NhbGxlZSB7CiAgYm9yZGVyLXRvcDogbm9uZTsKICBib3JkZXItbGVmdDpub25lOwogIGJvcmRlci1yaWdodDogbm9uZTsKICBib3JkZXItY29sb3I6IGdyYXk7CiAgYm9yZGVyLXdpZHRoOiAycHg7CiAgYm9yZGVyLXJhZGl1czogMCU7Cn0KI3BhdGgtbGlzdHsKICB3aWR0aDogNTAlOwp9Ci5sYWJlbHsKICBmb250LXNpemU6IDExcHg7CiAgY29sb3I6IGdyYXk7Cn0KLmxhYmVsY29udGFpbmVyewogIHRleHQtYWxpZ246IGxlZnQ7Cn0K"},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <!-- <img alt=\"Vue logo\" src=\"./assets/logo.png\"> -->\n    <!-- <HelloWorld msg=\"Welcome to Your Vue.js App\"/> -->\n    <div class=\"d-flex\">\n      <form id=\"inputform\" class=\"border shadow-sm h-50 p-3 mx-5 mb-3 bg-body rounded\">\n        <div class=\"labelcontainer\">\n          <label class=\"label\">Звонящая сторона (Caller)</label>\n        </div>\n        <select class=\"form-select mb-2\" id=\"caller\" v-model=\"caller\" v-on:change=\"createPath\">\n          <option v-for=\"(key, value) in myData.country\" :key=\"value\">{{ key }} ({{value}})</option>\n        </select>\n        \n        <div class=\"labelcontainer\">\n          <label class=\"label\">Принимающая сторона (Callee)</label>\n        </div>\n        <select class=\"form-select\" id=\"callee\" v-model=\"callee\" v-on:change=\"createPath\">\n          <option v-for=\"(key, value) in myData.country\" :key=\"value\">{{ key }} ({{value}}) </option>\n        </select>\n        <base-checkbox label=\"Все\" value=\"all\" v-model=\"All_isChecked\" v-on:change=\"setCheckbox\" :key=\"All_isChecked + 1\"/>\n        <base-checkbox label=\"Прямое соединение\" value=\"direct\" v-model=\"Direct_isChecked\" v-on:change=\"showPaths\" :key=\"Direct_isChecked + 10\"/>\n        <base-checkbox label=\"Один дополнительный узел\" value=\"one\" v-model=\"One_isChecked\" v-on:change=\"showPaths\" :key=\"One_isChecked + 20\"/>\n        <base-checkbox label=\"Два дополнительных узла\" value=\"two\" v-model=\"Two_isChecked\" v-on:change=\"showPaths\" :key=\"Two_isChecked + 30\"/>\n      </form>\n      <!-- <ul>\n        <call-view v-for=\"item in showedPaths.sort((a, b) => a.totalPrice > b.totalPrice ? 1 : -1)\" :key=\"item.id + item.nodes\" :path=\"item\">\n        </call-view>\n      </ul> -->\n      <list-view id=\"path-list\" :listData=\"showedPaths.sort((a, b) => a.totalPrice > b.totalPrice ? 1 : -1)\" :size=\"4\" :key=\"showedPaths\"/>\n    </div>\n  </div> \n   \n</template>\n\n<script>\n//import CallView from './components/CallView.vue'\nimport BaseCheckbox from './components/BaseCheckbox.vue'\nimport ListView from './components/ListView.vue'\nexport default {\n  name: 'App',\n  components: {\n    /* CallView, */ BaseCheckbox, ListView\n  },  \n  data(){\n    return{\n      caller: '', \n      callee: '',\n      All_isChecked: true,\n      Direct_isChecked: true,\n      One_isChecked: true,\n      Two_isChecked: true,\n      paths: [],\n      showedPaths: []\n    }\n  },  \n  mounted() {\n    this.$store.dispatch('GET_DATA');\n  },\n  computed: {\n    myData() {\n      return this.$store.getters.DATA;\n    },\n    callerCode() {\n      return this.caller.split(\" \")[1].substring(1, 3)\n    },\n    calleeCode() {\n      return this.callee.split(\" \")[1].substring(1, 3)\n    }\n  },\n  methods: {\n    setCheckbox(){      \n      if (this.All_isChecked) {\n        this.Direct_isChecked = true\n        this.One_isChecked = true\n        this.Two_isChecked = true\n      }\n      else {\n        this.Direct_isChecked = false\n        this.One_isChecked = false\n        this.Two_isChecked = false\n      }\n      this.showPaths()\n    },\n    \n    showPaths(){  \n      if (this.Direct_isChecked && this.One_isChecked && this.Two_isChecked) {\n        this.All_isChecked = true\n      } \n      if (!this.Direct_isChecked || !this.One_isChecked || !this.Two_isChecked) {\n        this.All_isChecked = false\n      }\n      this.showedPaths = []\n      if (this.caller != '' && this.callee != ''){\n        if (!this.All_isChecked){\n          if (this.Direct_isChecked){\n            this.paths.forEach(path => {\n              if (path.nodes.length == 2) {\n                this.showedPaths.push(path)\n              }\n            });\n          }\n          if (this.One_isChecked) {\n            this.paths.forEach(path => {\n              if (path.nodes.length == 3) {\n                this.showedPaths.push(path)\n              }\n            });\n          }\n          if (this.Two_isChecked) {\n            this.paths.forEach(path => {\n              if (path.nodes.length == 4) {\n                this.showedPaths.push(path)\n              }\n            });\n          }\n        }\n        else this.showedPaths = this.paths\n      }      \n    },\n    createPath () {\n      this.paths = []\n        console.log(this.callerCode)\n        if (this.caller != '' && this.callee != ''){\n          let companies = []\n          for (let company in this.myData.company) {\n            companies.push(company)        \n          } \n          let restricted = [this.callerCode]           \n          companies.forEach(firstCompany => {\n            this.myData.company[firstCompany].forEach(firstWay => {\n              if (firstWay.src.substring(0,2) === this.callerCode) {\n                if (firstWay.des.substring(0,2) === this.calleeCode) {\n                  this.paths.push({\n                    totalPrice: firstWay.price,\n                    companies: [firstCompany],\n                    prices: [firstWay.price],\n                    nodes: [this.callerCode, this.calleeCode],\n                    id: this.paths.length+1\n                  })                \n                }\n                else {\n                  restricted.push(firstWay.des.substring(0,2))\n                  companies.forEach(secondCompany => {\n                    this.myData.company[secondCompany].forEach(secondWay => {\n                      if (secondWay.src === firstWay.des && !(secondWay.des.substring(0,2) in restricted)){\n                        if (secondWay.des.substring(0,2) === this.calleeCode) {\n                          this.paths.push({\n                            totalPrice: firstWay.price + secondWay.price,\n                            companies: [firstCompany, secondCompany],\n                            prices: [firstWay.price, secondWay.price],\n                            nodes: [this.callerCode, secondWay.src.substring(0,2), this.calleeCode],\n                            id: this.paths.length+1\n                          })\n                        }\n                        else {\n                          companies.forEach(thirdCompany => {\n                            this.myData.company[thirdCompany].forEach(thirdWay => {\n                              if (thirdWay.src === secondWay.des && thirdWay.des.substring(0,2) === this.calleeCode){\n                                this.paths.push({\n                                  totalPrice: firstWay.price + secondWay.price + thirdWay.price,\n                                  companies: [firstCompany, secondCompany, thirdCompany],\n                                  prices: [firstWay.price, secondWay.price, thirdWay.price],\n                                  nodes: [this.callerCode, secondWay.src.substring(0,2), thirdWay.src.substring(0,2), this.calleeCode],\n                                  id: this.paths.length+1\n                                })\n                              }\n                            });\n                          });\n                        }\n                      }\n                    })\n                });\n              }\n            }\n          });          \n        });\n        this.showPaths()       \n        console.log(this.paths.sort((a, b) => a.totalPrice > b.totalPrice ? 1 : -1))\n      }\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n#inputform{\n  width: 30%;\n}\n#caller,#callee {\n  border-top: none;\n  border-left:none;\n  border-right: none;\n  border-color: gray;\n  border-width: 2px;\n  border-radius: 0%;\n}\n#path-list{\n  width: 50%;\n}\n.label{\n  font-size: 11px;\n  color: gray;\n}\n.labelcontainer{\n  text-align: left;\n}\n</style>"]}]}